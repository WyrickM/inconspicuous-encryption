{"ast":null,"code":"var _jsxFileName = \"/home/mwyrick/security-project/inconspicuous-encryption/src/Home.tsx\";\nimport { PageHeader, Typography } from \"antd\";\nimport * as React from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Title\n} = Typography;\n\nconst Home = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PageHeader, {\n      title: /*#__PURE__*/_jsxDEV(Title, {\n        style: {\n          fontSize: \"50px\"\n        },\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 24\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: \"25px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Welcome to Inconspicuous Encryption!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Inconspicuous Encryption is all about hiding in plain sight. With this application you will be able to hide in plain sight. The ecryption process is called Steganography. It is the process of hiding information in objects without altering or changing the object to the naked eye. With Steganography you are able to encrypt and decrypt messages in pictures, videos, and audio. An advantage that Steganography has over other encryption processes is that other encryption processes tend to show an attacker that this message is encrypted, but with Steganography the information that there contains an encrypted message will be hidden to the naked eye of an attacker.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"With Inconspicuous Encryption you will be encrypting and decrypting messages in images. Specifically .jpg, .png, and .pdf images.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"It is important to note that if someone really wanted to know your secret message that you are sending or receiving it is still possible for them to read the plain text message. They would first have to be able to intercept the message. Then they would need to know that the image you are sending/receiving has an encrypted message. And finally would have to use the Inconspicuous Encryption application which is open to the public to decrypt it. The likelihood that all of this would happen is very low but still possible.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/mwyrick/security-project/inconspicuous-encryption/src/Home.tsx"],"names":["PageHeader","Typography","React","Title","Home","fontSize"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,MAAvC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,WAAP;;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAYF,UAAlB;;AAEA,MAAMG,IAAa,GAAG,MAAM;AAExB,sBACI;AAAA,2BACI,QAAC,UAAD;AACI,MAAA,KAAK,eAAE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAACC,UAAAA,QAAQ,EAAC;AAAV,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADX;AAAA,6BAGI;AAAK,QAAA,KAAK,EAAE;AAACA,UAAAA,QAAQ,EAAC;AAAV,SAAZ;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbJ,eAiBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAiCH,CAnCD;;KAAMD,I;AAqCN,eAAeA,IAAf","sourcesContent":["import { PageHeader, Typography } from \"antd\";\nimport * as React from \"react\";\nimport './App.css';\n\nconst { Title } = Typography;\n\nconst Home:React.FC = () => {\n\n    return (\n        <>\n            <PageHeader\n                title={<Title style={{fontSize:\"50px\"}}>Home</Title>}\n            >\n                <div style={{fontSize:\"25px\"}}>\n                    <p>\n                        Welcome to Inconspicuous Encryption!\n                    </p>\n                    <p>\n                        Inconspicuous Encryption is all about hiding in plain sight. With this application\n                        you will be able to hide in plain sight. The ecryption process is called Steganography.\n                        It is the process of hiding information in objects without altering or changing the object \n                        to the naked eye. With Steganography you are able to encrypt and decrypt messages in pictures,\n                        videos, and audio. An advantage that Steganography has over other encryption processes is that \n                        other encryption processes tend to show an attacker that this message is encrypted, but with Steganography \n                        the information that there contains an encrypted message will be hidden to the naked eye of an attacker.\n                    </p>\n                    <p>\n                        With Inconspicuous Encryption you will be encrypting and decrypting messages in images. Specifically \n                        .jpg, .png, and .pdf images. \n                    </p>\n                    <p>\n                        It is important to note that if someone really wanted to know your secret message that you are sending\n                        or receiving it is still possible for them to read the plain text message. They would first have to be able\n                        to intercept the message. Then they would need to know that the image you are sending/receiving has an\n                        encrypted message. And finally would have to use the Inconspicuous Encryption application which is open to the\n                        public to decrypt it. The likelihood that all of this would happen is very low but still possible.\n                    </p>\n                </div>\n            </PageHeader>\n        </>\n    );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}